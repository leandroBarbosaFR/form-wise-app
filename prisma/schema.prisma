generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  password         String?
  role             Role
  createdAt        DateTime           @default(now())
  firstName        String
  lastName         String
  phone            String
  iban             String?
  bic              String?
  bankName         String?
  students         Student[]
  NotificationRead NotificationRead[]
  inviteToken      String?            @unique
  teacher          Teacher?
  civility         String?
}

model Student {
  id              String         @id @default(cuid())
  firstName       String
  lastName        String
  birthDate       DateTime
  address         String
  hasHealthIssues Boolean
  healthDetails   String?
  canLeaveAlone   Boolean
  status          String   @default("PENDING")
  parentId        String
  parent          User           @relation(fields: [parentId], references: [id])
  classId         String?
  class           Class?         @relation(fields: [classId], references: [id])
  createdAt       DateTime       @default(now())
  notifications   Notification[]
  documents       Document[]
  code            String? @unique @default(uuid())
}

model Class {
  id           String     @id @default(cuid())
  name         String
  monthlyFee   Float
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  createdAt    DateTime   @default(now())
  subjects     Subject[]
  teachers     Teacher[]
  Student      Student[]
}

model Document {
  id         String   @id @default(cuid())
  url        String
  fileName   String
  fileType   String
  createdAt  DateTime @default(now())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
}

model Subject {
  id        String    @id @default(cuid())
  name      String
  class     Class     @relation(fields: [classId], references: [id])
  classId   String
  createdAt DateTime  @default(now())
  teachers  Teacher[]
}

model Teacher {
  id                String                    @id @default(cuid())
  userId            String?                   @unique
  user              User?                     @relation(fields: [userId], references: [id])
  subject           Subject?                  @relation(fields: [subjectId], references: [id])
  subjectId         String?
  class             Class?                    @relation(fields: [classId], references: [id])
  classId           String?
  Notification      Notification[]
  notificationsRead NotificationReadTeacher[]
}

model SchoolYear {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  classes Class[]
}

model Notification {
  id             String                    @id @default(cuid())
  title          String
  message        String
  isGlobal       Boolean
  studentId      String?
  student        Student?                  @relation(fields: [studentId], references: [id])
  teacherId      String?
  teacher        Teacher?                  @relation(fields: [teacherId], references: [id])
  createdAt      DateTime                  @default(now())
  readBy         NotificationRead[]
  readByTeachers NotificationReadTeacher[]
}

model NotificationRead {
  id             String       @id @default(uuid())
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  parent         User         @relation(fields: [parentId], references: [id])
  parentId       String
  readAt         DateTime?

  @@unique([notificationId, parentId])
}

model NotificationReadTeacher {
  id             String       @id @default(uuid())
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  teacher        Teacher      @relation(fields: [teacherId], references: [id])
  teacherId      String
  readAt         DateTime?

  @@unique([notificationId, teacherId])
}

enum Role {
  PARENT
  TEACHER
  DIRECTOR
}

enum Civility {
  M
  Mme
  Mlle
}
